generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  toppings    String
  basePrice   Float
  isAvailable Boolean

  options Option[]
  tags    Tag[]

  image   Image    @relation(fields: [imageId], references: [id])
  reviews Review[]

  category Category

  orderItem OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String
}

model Tag {
  id        String @id @default(uuid())
  name      String
  textColor String
  bgColor   String

  product Product[]
}

model Option {
  id      String       @id @default(uuid())
  name    String
  options OptionItem[]
  product Product[]
}

model OptionItem {
  id    String @id @default(uuid())
  value String
  label String
  price Float

  Option   Option @relation(fields: [optionId], references: [id])
  optionId String

  OrderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
  orderItemId String?
}

model Image {
  id  String @id @default(uuid())
  url String

  Product Product[]
  News    News[]
}

model Review {
  id        String   @id @default(uuid())
  title     String
  content   String
  rating    Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model News {
  id      String @id @default(uuid())
  title   String
  content String
  image   Image  @relation(fields: [imageId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  publishedAt DateTime @default(now())
  imageId     String
}

model Order {
  id         String      @id @default(uuid())
  totalPrice Float
  items      OrderItem[]
  status     OrderStatus
  address    Address     @relation(fields: [addressId], references: [id])
  addressId  String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id            String       @id @default(uuid())
  productId     String
  quantity      Int
  price         Float
  pickedOptions OptionItem[]

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  product Product @relation(fields: [productId], references: [id])
  User    User    @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id             String @id @default(uuid())
  userId         String
  buildingNumber Int
  street         String
  city           String

  user  User    @relation(fields: [userId], references: [id])
  Order Order[]
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  clerkUserId String  @unique
  role        Role

  orders     Order[]
  orderItems OrderItem[]
  addresses  Address[]
  reviews    Review[]
  News       News[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  admin
  user
}

enum OrderStatus {
  pending
  delivered
  cancelled
}

enum Category {
  pizza
  fastFood
  other
}
