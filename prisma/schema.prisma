generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id       String @id @default(uuid())
  name     String
  toppings String
  price    Float

  sizes Size[]
  tags  Tag[]

  images  Image[]
  reviews Review[]

  category Category

  orderItem OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String @id @default(uuid())
  name      String
  textColor String
  bgColor   String

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Size {
  id      String    @id @default(uuid())
  name    String
  value   String
  product Product[]
}

model Image {
  id        String  @id @default(uuid())
  url       String
  isPrimary Boolean
  productId String

  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  title     String
  content   String
  rating    Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model News {
  id       String @id @default(uuid())
  title    String
  content  String
  imageUrl String
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  publishedAt DateTime @default(now())
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  totalPrice Float
  items      OrderItem[]
  status     OrderStatus
  address    Address     @relation(fields: [addressId], references: [id])

  user      User   @relation(fields: [userId], references: [id])
  addressId String
}

model OrderItem {
  id        String @id @default(uuid())
  productId String
  quantity  Int
  price     Float

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product Product @relation(fields: [productId], references: [id])
}

model Address {
  id             String @id @default(uuid())
  userId         String
  buildingNumber Int
  street         String
  city           String

  user  User    @relation(fields: [userId], references: [id])
  Order Order[]
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  clerkUserId String  @unique
  role        Role

  orders    Order[]
  addresses Address[]
  reviews   Review[]
  News      News[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  admin
  user
}

enum OrderStatus {
  pending
  delivered
  cancelled
}

enum Category {
  pizza
  fastFood
  other
}
